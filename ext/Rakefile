require 'rake/clean'

EXT_DIR = File.expand_path(File.dirname __FILE__)
RTMIDI_DIR = "#{EXT_DIR}/rtmidi-2.0.1"

HOST_OS = RbConfig::CONFIG['host_os'].downcase
OS_X = (HOST_OS =~ /darwin/)
WINDOWS = ((HOST_OS =~ /win/ and HOST_OS !~ /darwin/) or HOST_OS =~ /mingw/)
LINUX = (HOST_OS =~ /linux/)

CLEAN.include('**/*.o', '*.log')
CLOBBER.include('*.so')

def cd(dir)
  puts "cd #{dir}"
  Dir.chdir(dir)
end

def run(cmd)
  puts cmd
  unless system(cmd)
    puts "Error: command exited with return value #{$?.exitstatus}"
    exit $?.exitstatus
  end
end


require "mkmf"
COMPILER = if WINDOWS and find_executable "cl.exe"
  :cl
else
  if find_executable "gcc" and find_executable "g++"
    :gcc
  else
    abort "Cannot find gcc/g++ #{'or cl.exe ' if WINDOWS}compiler"
  end
end

PREDEFINE, SYSTEM_LIBS = *case
  when OS_X then ["__MACOSX_CORE__", "-framework CoreMIDI -framework CoreAudio -framework CoreFoundation"]
  when WINDOWS then ["__WINDOWS_MM__", "-lwinmm"]
  when LINUX then
    defines, libs = '', ''
    {:alsa => '__LINUX_ALSA__', :jack => '__UNIX_JACK__'}.select do |pkg, _|
      system "pkg-config --exists #{pkg}"
    end.each do |pkg, macro|
      defines << "#{macro} "
      libs << `pkg-config --libs #{pkg}`.chomp
    end
    if defines.empty?
      raise 'Neither JACK or ALSA detected using pkg-config. Please install one of them first.'
    end
    [defines, libs]
  else
end


def compile_rtmidi
  cd RTMIDI_DIR
  if COMPILER == :gcc
    run "g++ -O3 -Wall -Iinclude -fPIC -D#{PREDEFINE} -o RtMidi.o -c RtMidi.cpp"
  else
    run "cl /O2 /Iinclude /D#{PREDEFINE} /EHsc /FoRtMidi.obj /c RtMidi.cpp"
  end
end

def compile_ruby_rtmidi_wrapper
  cd EXT_DIR
  if COMPILER == :gcc
    run "g++ -g -Wall -I#{RTMIDI_DIR} -fPIC -o ruby-rtmidi.o -c ruby-rtmidi.cpp"
  else
    run "cl /I#{RTMIDI_DIR} /D__RUBY_RTMIDI_DLL__ /EHsc /Foruby-rtmidi.obj /c ruby-rtmidi.cpp"
  end
end

def create_shared_library
  cd EXT_DIR
  if COMPILER == :gcc
    run "g++ -g -Wall -I#{RTMIDI_DIR} -I#{RTMIDI_DIR}/include -D#{PREDEFINE} -fPIC -shared -o ruby-rtmidi.so " +
        "ruby-rtmidi.o #{RTMIDI_DIR}/RtMidi.o #{SYSTEM_LIBS}"
  else
    run "cl /I#{RTMIDI_DIR} /I#{RTMIDI_DIR}/include /D#{PREDEFINE} /LD ruby-rtmidi.obj #{RTMIDI_DIR}/RtMidi.obj winmm.lib"
  end
end


desc 'run the make task'
task :default => :make

desc 'build the RtMidi C++ library with Ruby FFI wrapper'
task :make do
  compile_rtmidi
  puts
  compile_ruby_rtmidi_wrapper
  puts
  create_shared_library
end
